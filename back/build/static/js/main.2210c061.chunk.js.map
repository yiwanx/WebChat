{"version":3,"sources":["components/Chat.jsx","components/Info.jsx","components/Input.js","components/Message.jsx","components/Messages.jsx","components/Users.jsx","components/Create.jsx","components/Join.jsx","App.js","serviceWorker.js","index.js","icons/online.svg","icons/close.svg"],"names":["socket","Info","location","useState","value","setValue","copied","setCopied","useEffect","room","queryString","parse","search","link","undefined","hostname","className","src","onlineIcon","alt","onChange","event","target","text","onCopy","style","color","href","closeIcon","Input","setMessage","sendMessage","message","type","placeholder","preventDefault","onKeyPress","key","onClick","Message","user","time","styleTime","current","marginRight","other","marginLeft","isSentByCurrent","name","toLowerCase","Messages","messages","messagesParsed","map","i","Users","users","Chat","setName","setRoom","setMessages","setUsers","URL","dependency","io","emit","error","alert","on","Create","uuidv4","to","Join","match","params","App","exact","path","component","Boolean","window","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.2210c061.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport io from \"socket.io-client\"\nimport queryString from 'query-string'\nimport Info from './Info'\nimport Input from \"./Input\";\nimport Messages from './Messages'\nimport Users from './Users'\nlet socket;\n\nconst Chat = ({location}) => {\n    const [name, setName] = useState('')\n    const [room, setRoom] = useState('')\n    const [messages, setMessages] = useState([])\n    const [users, setUsers] = useState([])\n    const [message, setMessage] = useState('')\n    const URL = 'localhost:4000'\n    let dependency = location.hostname ? location.search:URL\n\n    useEffect(() => {\n        const {name, room} = queryString.parse(location.search)\n        socket = io(URL)\n        setName(name)\n        setRoom(room)\n\n        socket.emit('join', {name, room},(error) => {\n            if(error) {\n                alert(error)\n            }\n        })\n\n    }, [dependency, location.search])\n\n    useEffect(() => {\n\n        socket.on('message', message => {\n            setMessages(messages => [...messages, message])\n        })\n        socket.on('roomData', users => {\n            setUsers(users)\n        })\n    },[])\n    const sendMessage = event => {\n        event.preventDefault()\n        if (message) {\n            socket.emit('sendMessage', message, () => setMessage(''))\n        }\n    }\n\n    return (\n        <div className='container'>\n            <div className='chat-container'>\n            <Info location={location}/>\n            <Messages messages={messages} name={name}/>\n            <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n            </div>\n            <Users users={users}/>\n        </div>\n    )\n}\n\nexport default Chat","import React, {useState, useEffect} from \"react\";\n\nimport onlineIcon from '../icons/online.svg'\nimport closeIcon from '../icons/close.svg'\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\nimport queryString from \"query-string\";\n\nconst Info = ({location}) => {\n    const URL = 'localhost:4000'\n    const [value, setValue] = useState('')\n    const [copied, setCopied] = useState(false)\n\n    useEffect(() => {\n        const {room} = queryString.parse(location.search)\n        let link =''\n        if (location.hostname !== undefined) {\n            link = `${location.hostname}/join&room=${room}`\n        }else {\n            link = `${URL}/join&room=${room}`\n        }\n\n        setValue(link)\n    }, [location.search])\n    const handleInput = (event) => {\n        setValue(event.target.value)\n        setCopied(false)\n    }\n    return (\n        <div className=\"info-container\">\n            <div className=\"container-left\">\n                <img className='online-icon' src={onlineIcon} alt=\"online\"/>\n                <h3>Copy to invite:</h3>\n                <input value={value}\n                       onChange={handleInput}/>\n                <div className='copy-container'>\n                <CopyToClipboard\n                    text={value}\n                    onCopy={() => setCopied(true)}>\n                    <button>Copy to clipboard</button>\n                </CopyToClipboard>\n                {copied ? <span style={{color: '#0066cc'}}>Copied.</span> : null}\n                </div>\n            </div>\n            <div className=\"container-right\">\n                <a href=\"/\"><img src={closeIcon} alt=\"close\"/></a>\n            </div>\n        </div>\n    )\n}\nexport default Info","import React from 'react';\n\n\nconst Input = ({ setMessage, sendMessage, message }) => {\n    const onChange = event => {\n        event.preventDefault()\n        setMessage(event.target.value)\n    }\n    const onKeyPress = event => {\n\n        return event.key === 'Enter' ? sendMessage(event) : null\n    }\n    return (\n\n        <form className=\"message-form\">\n            <input\n                className=\"message-input\"\n                type=\"text\"\n                placeholder=\"Type a message...\"\n                value={message}\n                onChange={onChange}\n                onKeyPress={onKeyPress}\n            />\n            <button className=\"send-button\" onClick={event => sendMessage(event)}>Send</button>\n        </form>\n    )\n}\n\nexport default Input;","import React from \"react\";\n\nconst Message = ({message: {user,text,time}, name}) => {\n    const styleTime = {\n\n        current: {\n            marginRight: 20,\n            color: '#4e009c',\n\n        },\n        other: {\n            marginLeft: 20,\n            color: '#4e009c',\n        }\n    }\n    let isSentByCurrent = false\n    const lowerCasedName = name.toLowerCase()\n    if (user === lowerCasedName) {\n        isSentByCurrent = true\n    }\n    return (\n        isSentByCurrent ?\n            (\n                <div className='message-container message-container__current-user'>\n                    <p style={styleTime.current}>{time}</p>\n                    <p className='sent-text sent-text__current-user'>{user}</p>\n                    <div className='message-box message-box__current-user'>\n                        <p className='message-text message-text__current-user'>{text}</p>\n                    </div>\n                </div>\n            )\n            :\n            (\n                <div className='message-container message-container__other-user'>\n\n                    <div className='message-box message-box__other-user'>\n                        <p className='message-text message-text__other-user'>{text}</p>\n\n                    </div>\n                    <p className='sent-text sent-text__other-user'>{user}</p>\n                    <p style={styleTime.other}>{time}</p>\n                </div>)\n    )\n}\nexport default Message","import React from \"react\";\nimport Message from './Message'\nimport ScrollToBottom from 'react-scroll-to-bottom';\nconst Messages = ({messages,name}) => {\n    const messagesParsed = messages.map((message,i )=> <Message key={i}message={message} name={name}/>)\n    return(\n        <ScrollToBottom className='messages'>{messagesParsed}</ScrollToBottom>\n    )\n}\nexport default Messages","import React from \"react\";\nimport onlineIcon from '../icons/online.svg'\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nconst Users = ({users}) => {\n    if (users['users'] !== undefined) {\n        return (\n            <div className='users-container'>\n                <h1>People currently chatting:</h1>\n                <ScrollToBottom  className=\"active-container\">\n\n                        {users['users'].map(({name}) => (\n                            <div key={name} className=\"active-item\">\n                                {name}\n                                <img className='online-icon' alt=\"Online Icon\" src={onlineIcon}/>\n                            </div>\n                        ))}\n\n                </ScrollToBottom>\n\n            </div>\n        )\n    }\n    return <div></div>\n}\nexport default Users","import React, {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {v4 as uuidv4} from 'uuid'\n\nconst Create = () => {\n    const [name, setName] = useState('')\n    const [room, setRoom] = useState('')\n\n    useEffect(() => {\n        setRoom(uuidv4())\n    },[])\n\n    return (\n        <div className=\"create-container\">\n            <form className='create-form'>\n                <h1>Sign in (Create new Room)</h1>\n                <div className=\"form-input\">\n                    <input placeholder=\"Name\"\n                           value={name}\n                           onChange={(event) => setName(event.target.value)}\n                    />\n                </div>\n                <Link onClick={event => (!room || !name) ? event.preventDefault() : null}\n                      to={`/chat?name=${name}&room=${room}`}>\n                    <button type=\"submit\" text=\"Sign in\" className=\"btn\">Sign In</button>\n                </Link>\n            </form>\n        </div>\n    )\n}\nexport default Create","import React, {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\nconst Join = ({match}) => {\n    const [name, setName] = useState('')\n    const [room, setRoom] = useState('')\n\n    useEffect(() => {\n        const room = match.params.room\n        setRoom(room)\n    },[match.params.room])\n\n    return (\n        <div className=\"container\">\n            <form className='create-form'>\n                <h1>Sign into existing chat</h1>\n                <div className=\"form-input\">\n                    <input placeholder=\"Name\"\n                           value={name}\n                           onChange={(event) => setName(event.target.value)}\n                    />\n                </div>\n                <Link onClick={event => (!room || !name) ? event.preventDefault() : null}\n                      to={`/chat?name=${name}${room}`}>\n                    <button type=\"submit\" className=\"btn\">Sign In</button>\n                </Link>\n            </form>\n        </div>\n    )\n}\nexport default Join","import React from 'react';\nimport './App.css';\nimport Chat from './components/Chat'\nimport Create from \"./components/Create\";\nimport Join from \"./components/Join\";\nimport {BrowserRouter, Route} from 'react-router-dom'\n\nconst App = () => (\n    <BrowserRouter>\n        <Route exact path=\"/\" component={Create}/>\n        <Route path=\"/chat\" component={Chat}/>\n        <Route path=\"/join:room\" component={Join}/>\n    </BrowserRouter>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/online.1baa09a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.7be28059.svg\";"],"sourceRoot":""}